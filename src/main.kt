/**
 * Класс для выполнения преобразований между десятичной системой счисления
 * и другими системами счисления.
 * На данные момент в классе реализована только функция преобразования
 * в десятичную систему счисления из системы счисления с основанием от 2 до 36
 * @constructor Первичный конструктор позволяет создать набор допустимых для
 * заданной системы счисления набора цифр
 * @param base Основание системы счисления из которой будет производиться преобразования значения
 */
class NumberSystemConverter(base: Int) {

    /**
     * Свойство с поздней инициализацией, предназначенное для хранения
     * набора цифр, допустимых в заданной основанием [base] системе счисления
     */
    private lateinit var digits: List<Char>

    /**
     * Основание используемой при конвертации системы счисления
     * @throws IllegalArgumentException если основание меньше 2 или больше 36
     */
    var base: Int = 10
        set(value) {
            // Проверка значения на допустимость.
            // Оно не должно быть меньше двух, чтобы систему счисления можно было использовать
            // и не должно быть больше 36, чтобы для используемых цифр хватило десятичных цифр и латинских букв
            if (value < 2 || value > 36) throw IllegalArgumentException("Недопустимое основание системы счисления")
            // сохранение значения в свойстве, если оно корректное
            field = value
            digits = createDigits()
        }

    init {
        // При создании объекта класса формируем допустимый набор цифр
        // для заданной системы счисления путём присовоения свойству [base]
        // значения
        this.base = base
    }

    /**
     * Функция для создания набора допустимых цифр для заданной системы счисления
     * @return Список допустимых цифр
     * @see base
     */
    private fun createDigits() = List(base) {
        // Формируем список, элементы которого вычисляются как цифры, если
        // индекс элемента находится в диапазоне от 0 до 9
        if (it < 10) '0' + it
        // и как буквы латинского алфавита, если индекс больше 10
        else 'A' + it - 10
    }

    /**
     * Функция преобразования числа из заданной системы счисления в
     * десятичную систему счисления
     * @param c Число, записанное в системе счисления с основанием base
     * @return Значение числа c в десятичной системе счисления, представленное в типе Long
     * @see createDigits
     */
    fun toDec(c: String): Long {
        // Формируем набор допустимых цифр для системы счисления с основанием base
        val digits = createDigits()
        // Проверяем, нет ли некорректных символов в строке, приведенной к верхнему регистру
        if (c.uppercase()
                .any { !digits.contains(it) }
        ) // проверяем, что все символы содержатся в списке одпустимых цифр
        // Если имеется некорректный символ, выбрасываем исключение
            throw Exception("Число содержит недопустимую цифру!")
        // Выполняем преобразование числа, используя стандартный универсальный алгоритм:
        // - берем исходную строку
        // - выполняем ее разворот
        // - запускаем аккумулятор начиная с нулевого значения, с помощью которого
        //   находим сумму произведения цифры из строки, преобразованной в десятичное число
        //   путем поиска индекса соответствующей цифры в списке допустимых цифр, на
        //   основание системы счисления в степени номера разряда
        return c.uppercase().reversed().foldIndexed(0L) { i, acc, d ->
            acc + digits.indexOf(d).toLong() * base.pow(i)
        }
    }

    /**
     * Функция-расширение для типа [Int], вычисляющая заданную степень целого числа
     * @param p степень, в которую нужно возвести целое число
     * @return возведенное в степень [p] целое число, представленное в типе [Long]
     */
    private fun Int.pow(p: Int) =
    // с помощью аккумуляторной функции за p действий накапливаем степень
        // заданного числа this типа Int
        (1..p).fold(1L) { acc, _ /* подчеркивание сообщает о неиспользуемом вотором параметре*/ ->
            acc * this.toLong()
        }
}
/**
 * Основная функция приложения. Выполняет преобразование числа,
 * введенного с клавиатуры и записанного в системе счисления с заданным основанием
 * в десятичное длинное целое число.
 */
fun main() {
    // Вводим основание системы счисления
    print("Основание: ")
    // При вводе выполняем конвертацию значения в целый тип и обеспечиванием
    // допустимый диапазон значений от 2 до 36.
    // Для систем счиаления с большим основанием в программе не будет хватать
    // знаков под цифры
    val base = readln().toInt().coerceIn(2, 36)
    // Вводим число в системе счисления с основанием base
    print("Число в ${base}-ичной системе счисления: ")
    val x = readln()
    try {
        // Создается объект для преобразования чисел из системы счисления
        // с основание base
        val cnv = NumberSystemConverter(base)
        // Используя созданный объект,
        // выполняем преобразование числа из системы счисления с основанием base
        // в десятичную систему счисления
        print("Число \"${x}\" в ${cnv.base} системе счисления: ")
        println(cnv.toDec(x))
        // увеличиваем основание использованной ранее системы счисления на 1
        print("То же число в ${cnv.base + 1}-чной системе счисления: ")
        cnv.base++
        // и пересчитываем значение:
        println(cnv.toDec(x))
    } catch (e: Exception){
        // В случае наличия в записи числа недопустимых символов,
        // выведем сообщение об ошибке
        println(e.message)
    }
}