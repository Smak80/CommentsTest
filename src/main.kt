/**
 * Функция для создания набора допустимых цифр для заданной системы счисления
 * @param base Основание системы счисления, для которой требуется получить допустимые цифры
 * @return Список допустимых цифр
 */
private fun createDigits(base: Int) = List(base){
    // Формируем список, элементы которого вычисляются как цифры, если
    // индекс элемента находится в диапазоне от 0 до 9
    if (it < 10) '0' + it
    // и как буквы латинского алфавита, если индекс больше 10
    else 'A' + it - 10
}

/**
 * Функция преобразования числа из заданной системы счисления в
 * десятичную систему счисления
 * @param c Число в системе счисления с основанием base
 * @param base Основание системы счисления, в которой записано число c
 * @return Значение числа c в десятичной системе счисления, представленное в типе Long
 * @see createDigits
 */
fun convertToDec(c: String, base: Int): Long{
    // Формируем набор допустимых цифр для системы счисления с основанием base
    val digits = createDigits(base)
    // Проверяем, нет ли некорректных символов в строке, приведенной к верхнему регистру
    if (c.uppercase().any{ !digits.contains(it) }) // проверяем, что все символы содержатся в списке одпустимых цифр
        // Если имеется некорректный символ, выбрасываем исключение
        throw Exception("Число содержит недопустимую цифру!")
    // Выполняем преобразование числа, используя стандартный универсальный алгоритм:
    // - берем исходную строку
    // - выполняем ее разворот
    // - запускаем аккумулятор начиная с нулевого значения, с помощью которого
    //   находим сумму произведения цифры из строки, преобразованной в десятичное число
    //   путем поиска индекса соответствующей цифры в списке допустимых цифр, на
    //   основание системы счисления в степени номера разряда
    return c.uppercase().reversed().foldIndexed(0L) { i, acc, d ->
        acc + digits.indexOf(d).toLong() * base.pow(i)
    }
}

/**
 * Функция-расширение для типа [Int], вычисляющая заданную степень целого числа
 * @param p степень, в которую нужно возвести целое число
 * @return возведенное в степень [p] целое число, представленное в типе [Long]
 */
private fun Int.pow(p: Int) =
    // с помощью аккумуляторной функции за p действий накапливаем степень
    // заданного числа this типа Int
    (1..p).fold(1L){ acc, _ /* подчеркивание сообщает о неиспользуемом вотором параметре*/ ->
        acc * this.toLong()
    }

/**
 * Основная функция приложения. Выполняет преобразование числа,
 * введенного с клавиатуры и записанного в системе счисления с заданным основанием
 * в десятичное длинное целое число.
 */
fun main() {
    // Вводим основание системы счисления
    print("Основание: ")
    // При вводе выполняем конвертацию значения в целый тип и обеспечиванием
    // допустимый диапазон значений от 2 до 36.
    // Для систем счиаления с большим основанием в программе не будет хватать
    // знаков под цифры
    val base = readln().toInt().coerceIn(2, 36)
    // Вводим число в системе счисления с основанием base
    print("Число в ${base}-ичной системе счисления: ")
    val x = readln()
    try {
        // Выполняем преобразование числа из системы счисления с основанием base
        // в десятичную систему счисления
        println(convertToDec(x, base))
    } catch (e: Exception){
        // В случае наличия в записи числа недопустимых символов,
        // выведем сообщение об ошибке
        println(e.message)
    }
}